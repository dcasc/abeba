from datetime import datetime, timedelta
import telebot
from telebot import types
from config import bot
from config import DEV_CHAT_ID

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ ---
def parse_time(time_str: str) -> datetime:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '30m', '2h', '1d' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è.
    """
    now = datetime.now()
    unit = time_str[-1]
    value = int(time_str[:-1])
    if unit == 'm':
        return now + timedelta(minutes=value)
    elif unit == 'h':
        return now + timedelta(hours=value)
    elif unit == 'd':
        return now + timedelta(days=value)
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ m/h/d.")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
def log_action(admin, action, target, chat):
    text = (
        f"üõ† <b>–õ–æ–≥ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã</b>\n"
        f"üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω: {admin.first_name} ({admin.id})\n"
        f"üéØ –¶–µ–ª—å: {target.first_name} ({target.id})\n"
        f"üìå –î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
        f"üí¨ –ß–∞—Ç: {chat.title} ({chat.id})\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    bot.send_message(DEV_CHAT_ID, text, parse_mode="HTML")


# --- 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@bot.chat_member_handler()
def greet_new_member(message: types.ChatMemberUpdated):
    if message.new_chat_member.status == "member":
        bot.send_message(
            message.chat.id,
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.new_chat_member.user.first_name}!"
        )

# --- 2. –ê–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø—Ä–∏ –ø–æ—Å—Ç–∞—Ö –∏–∑ –∫–∞–Ω–∞–ª–∞ ---
@bot.message_handler(
    content_types=['text', 'photo', 'video', 'document'],
    func=lambda m: m.is_automatic_forward
)
def add_social_links(message):
    if message.is_automatic_forward:
        social_links = (
            "\nüìå –ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:\n"
            "VK: https://vk.com/...\n"
            "TG: https://t.me/...\n"
        )
        bot.send_message(message.chat.id, social_links)

# --- 3. –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π + –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ ---
@bot.message_handler(commands=['del'])
def delete_user_message(message):
    member = bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.status in ("administrator", "creator") and message.reply_to_message:
        bot.delete_message(message.chat.id, message.reply_to_message.message_id)
        bot.delete_message(message.chat.id, message.message_id)
        log_action(message.from_user, "–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è", message.reply_to_message.from_user, message.chat)

# --- 4. –ú—É—Ç ---
@bot.message_handler(commands=['mute'])
def mute_user(message):
    member = bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.status in ("administrator", "creator") and message.reply_to_message:
        try:
            args = message.text.split()
            until = parse_time(args[1]) if len(args) > 1 else datetime.now() + timedelta(hours=1)
            user_id = message.reply_to_message.from_user.id

            # –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.restrict_chat_member(
                message.chat.id,
                user_id,
                until_date=until,
                can_send_messages=False
            )

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.delete_message(message.chat.id, message.reply_to_message.message_id)
            bot.delete_message(message.chat.id, message.message_id)

            # –õ–æ–≥ –≤ DEV_CHAT_ID
            log_action(
                message.from_user,
                f"–ú—É—Ç –¥–æ {until}",
                message.reply_to_message.from_user,
                message.chat
            )

            # –ü—É–±–ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            until_str = until.strftime('%d.%m.%Y %H:%M:%S')
            bot.send_message(
                message.chat.id,
                f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>"
                f"{message.reply_to_message.from_user.first_name}</a> "
                f"–∑–∞–º—É—á–µ–Ω –¥–æ <b>{until_str}</b>.",
                parse_mode="HTML"
            )

        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")


# --- 5. –†–∞–∑–º—É—Ç ---
@bot.message_handler(commands=['unmute'])
def unmute_user(message):
    member = bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.status not in ("administrator", "creator"):
        return  # –ù–µ –∞–¥–º–∏–Ω ‚Äî –≤—ã—Ö–æ–¥–∏–º

    target_user = None

    # 1Ô∏è‚É£ –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user

    # 2Ô∏è‚É£ –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω @username –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã
    else:
        args = message.text.split()
        if len(args) > 1 and args[1].startswith("@"):
            username = args[1][1:]  # —É–±–∏—Ä–∞–µ–º @
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö)
                # –∏–ª–∏ –∏—â–µ–º —á–µ—Ä–µ–∑ get_chat_member
                # –í pyTelegramBotAPI –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ username, –ø–æ—ç—Ç–æ–º—É:
                #  - –µ—Å–ª–∏ –±–æ—Ç –Ω–µ–¥–∞–≤–Ω–æ –≤–∏–¥–µ–ª —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ, –æ–Ω —Å–º–æ–∂–µ—Ç –µ–≥–æ –Ω–∞–π—Ç–∏
                #  - –∏–Ω–∞—á–µ Telegram API –Ω–µ –¥–∞—Å—Ç ID
                for member_info in bot.get_chat_administrators(message.chat.id) + \
                                    [bot.get_chat_member(message.chat.id, message.from_user.id)]:
                    if member_info.user.username and member_info.user.username.lower() == username.lower():
                        target_user = member_info.user
                        break
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–æ–≤ ‚Äî –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –±–æ—Ç –µ—ë –≤–∏–¥–µ–ª)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å username->id –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            except Exception as e:
                bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {e}")
                return

    if not target_user:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username.")
        return

    try:
        bot.restrict_chat_member(
            message.chat.id,
            target_user.id,
            can_send_messages=True
        )
        bot.delete_message(message.chat.id, message.message_id)

        # –õ–æ–≥
        log_action(message.from_user, "–†–∞–∑–º—É—Ç", target_user, message.chat)

        # –ü—É–±–ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.send_message(
            message.chat.id,
            f"üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={target_user.id}'>"
            f"{target_user.first_name}</a> —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç.",
            parse_mode="HTML"
        )

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")


# --- 6. –ë–∞–Ω ---
@bot.message_handler(commands=['ban'])
def ban_user(message):
    member = bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.status in ("administrator", "creator") and message.reply_to_message:
        try:
            args = message.text.split()
            until = parse_time(args[1]) if len(args) > 1 else None
            user_id = message.reply_to_message.from_user.id

            # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.ban_chat_member(message.chat.id, user_id, until_date=until, revoke_messages=False)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.delete_message(message.chat.id, message.reply_to_message.message_id)
            bot.delete_message(message.chat.id, message.message_id)

            # –õ–æ–≥ –≤ DEV_CHAT_ID
            log_action(
                message.from_user,
                f"–ë–∞–Ω –¥–æ {until if until else '–Ω–∞–≤—Å–µ–≥–¥–∞'}",
                message.reply_to_message.from_user,
                message.chat
            )

            # –ü—É–±–ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            if until:
                until_str = until.strftime('%d.%m.%Y %H:%M:%S')
                ban_text = f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>" \
                           f"{message.reply_to_message.from_user.first_name}</a> " \
                           f"–∑–∞–±–∞–Ω–µ–Ω –¥–æ <b>{until_str}</b>."
            else:
                ban_text = f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>" \
                           f"{message.reply_to_message.from_user.first_name}</a> " \
                           f"–∑–∞–±–∞–Ω–µ–Ω <b>–Ω–∞–≤—Å–µ–≥–¥–∞</b>."

            bot.send_message(message.chat.id, ban_text, parse_mode="HTML")

        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")


# --- 7. –†–∞–∑–±–∞–Ω ---
@bot.message_handler(commands=['unban'])
def unban_user(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    member = bot.get_chat_member(message.chat.id, message.from_user.id)
    if member.status not in ("administrator", "creator"):
        return

    target_user = None

    # 1Ô∏è‚É£ –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user

    # 2Ô∏è‚É£ –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω @username –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã
    else:
        args = message.text.split()
        if len(args) > 1 and args[1].startswith("@"):
            username = args[1][1:]  # —É–±–∏—Ä–∞–µ–º @
            try:
                # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ—Ç "–∑–Ω–∞–µ—Ç"
                # (–≤ –∏–¥–µ–∞–ª–µ ‚Äî —Ö—Ä–∞–Ω–∏—Ç—å username->id –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
                chat_members = bot.get_chat_administrators(message.chat.id)
                for admin_info in chat_members:
                    if admin_info.user.username and admin_info.user.username.lower() == username.lower():
                        target_user = admin_info.user
                        break
            except Exception as e:
                bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {e}")
                return

    if not target_user:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username.")
        return

    try:
        # –†–∞–∑–±–∞–Ω
        bot.unban_chat_member(message.chat.id, target_user.id)

        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        bot.delete_message(message.chat.id, message.message_id)

        # –õ–æ–≥ –≤ DEV_CHAT_ID
        log_action(message.from_user, "–†–∞–∑–±–∞–Ω", target_user, message.chat)

        # –ü—É–±–ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={target_user.id}'>"
            f"{target_user.first_name}</a> –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.",
            parse_mode="HTML"
        )

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")


